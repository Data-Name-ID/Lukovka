from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

revision: str = "fe96f90cfaf6"
down_revision: str | None = "72a225b056fe"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "depots",
        sa.Column("region", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    )
    op.add_column("lots", sa.Column("date", sa.DateTime(), nullable=False))
    op.add_column("lots", sa.Column("price", sa.Float(), nullable=False))
    op.alter_column("lots", "depot_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("lots", "fuel_id", existing_type=sa.INTEGER(), nullable=False)
    op.drop_column("lots", "price_per_ton")
    op.drop_column("lots", "deactivated_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "lots",
        sa.Column(
            "deactivated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "lots",
        sa.Column(
            "price_per_ton",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.alter_column("lots", "fuel_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("lots", "depot_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("lots", "price")
    op.drop_column("lots", "date")
    op.drop_column("depots", "region")
    # ### end Alembic commands ###
